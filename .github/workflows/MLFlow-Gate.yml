name: W7 Gate (MLflow Registry)

on:
  pull_request:
    branches: [ main, master ]
    paths:
      - "W7-D1-mlflow-adv/**"
      - ".github/workflows/w7-mlflow-gate.yml"
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  gate:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    concurrency:
      group: mlflow-gate-${{ github.ref }}
      cancel-in-progress: false

    defaults:
      run:
        working-directory: W7-D1-mlflow-adv

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-py312-${{ hashFiles('W7-D1-mlflow-adv/requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-py312-

      - name: Install deps
        run: |
          python -m venv .venv
          . .venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      # ðŸ‘‰ Use your EC2 MLflow. No server start in CI.
      - name: Configure & verify MLflow endpoint (EC2)
        run: |
          set -euo pipefail
          MLFLOW_TRACKING_URI="http://54.147.138.39:8081"
          echo "MLFLOW_TRACKING_URI=$MLFLOW_TRACKING_URI" >> "$GITHUB_ENV"

          echo "Waiting for MLflow at $MLFLOW_TRACKING_URI/ ..."
          for i in {1..45}; do
            if curl -fsS "$MLFLOW_TRACKING_URI/" >/dev/null; then
              echo "MLflow reachable"
              exit 0
            fi
            sleep 2
          done
          echo "::error::MLflow is not reachable at $MLFLOW_TRACKING_URI"
          # Try to show a bit more context
          curl -iS "$MLFLOW_TRACKING_URI/" || true
          exit 1

      - name: Show versions (sanity)
        run: |
          . .venv/bin/activate
          python -V
          pip show mlflow || true
          echo "Using MLFLOW_TRACKING_URI=$MLFLOW_TRACKING_URI"

      - name: Train v1 (baseline) and promote to Production
        run: |
          . .venv/bin/activate
          make train_v1
          make promote VERSION=1 STAGE=Production DRY=false

      - name: Train v2 (candidate)
        run: |
          . .venv/bin/activate
          make train_v2

      - name: Run gate on candidate (v2)
        run: |
          . .venv/bin/activate
          set -e
          make list
          make gate VERSION=2

      - name: Upload artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: w7d2-mlflow-artifacts
          path: |
            W7-D1-mlflow-adv/logs/**
            W7-D1-mlflow-adv/metrics/**
            W7-D1-mlflow-adv/reports/**
            W7-D1-mlflow-adv/artifacts/**
          if-no-files-found: warn
